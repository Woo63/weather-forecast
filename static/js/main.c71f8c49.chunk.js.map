{"version":3,"sources":["assets/constants.tsx","components/SelectCity/SelectCity.tsx","components/PlugWeatherForecastCard/PlugWeatherForecastCard.tsx","components/OneDayForecastCard/OneDayForecastCard.tsx","components/InputDate/InputDate.tsx","components/PastForecastBlock/PastForecastBlock.tsx","components/WeeklyForecastGroup/WeeklyForecastGroup.tsx","components/WeeklyForecastBlock/WeeklyForecastBlock.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["months","cityArr","name","latitude","longitude","API_KEY","SelectCity","props","useState","show","setShow","classNameArrow","setClassNameArrow","classNameUl","setClassNameUl","city","setCity","color","textColor","setTextColor","useEffect","className","onClick","type","style","e","event","target","Number","id","onSelect","map","item","index","toString","PlugWeatherForecastCard","OneDayForecastCard","forecast","date","src","icon","alt","temp","InputDate","onChange","setDate","arr","split","dateToFormatString","value","placeholder","pattern","onSubmit","console","log","PastForecastBlock","time","setTime","setForecast","loading","setLoading","dateForCard","setDateFarCard","length","findIndex","selectedCity","a","fetch","response","json","data","Math","floor","current","weather","message","fetchWeather","exec","newDate","Date","stringToFormatDate","getTime","getDate","getMonth","getFullYear","WeeklyForecastGroup","selectedDayIndex","setSelectedDayIndex","showButton","setShowButton","disabledNext","setDisabledNext","disabledPrev","setDisabledPrev","changeDayIndex","next","showArrows","document","documentElement","clientWidth","window","addEventListener","selectedFormCard","disabled","WeeklyForecastBlock","getWeeklyForecast","weatherForecast","i","daily","push","day","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.c71f8c49.chunk.js","sourcesContent":["export interface ICity {\r\n  name: string,\r\n  latitude: number,\r\n  longitude: number\r\n}\r\n\r\nexport interface IDayWeather {\r\n    temp: number,\r\n    icon: string,\r\n    date: string\r\n}\r\n\r\nexport const months: string[] = ['jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec']\r\n\r\nexport const cityArr: ICity[] = [\r\n  {\r\n    name: 'Samara',\r\n    latitude: 53.195873,\r\n    longitude: 50.100193\r\n  },\r\n  {\r\n    name: 'Saratov',\r\n    latitude: 51.533557,\r\n    longitude: 46.034257\r\n  },\r\n  {\r\n    name: 'Kazan',\r\n    latitude: 55.796127,\r\n    longitude: 49.106405\r\n  },\r\n  {\r\n    name: 'Krasnodar',\r\n    latitude: 45.035470,\r\n    longitude: 38.975313\r\n  },\r\n  {\r\n    name: 'Togliatti',\r\n    latitude: 53.507836,\r\n    longitude: 49.420393\r\n  }]\r\n\r\nexport const API_KEY: string = '373651eef091af2d1670e866f24aa876'\r\n","import React, { useEffect, useState } from 'react'\r\nimport { cityArr } from '../../assets/constants'\r\nimport './SelectCity.css'\r\n\r\nfunction SelectCity (props : any) {\r\n  const [show, setShow] = useState<boolean>(false)\r\n  const [classNameArrow, setClassNameArrow] = useState<string>('select__head close')\r\n  const [classNameUl, setClassNameUl] = useState<string>('select__list close')\r\n  const [city, setCity] = useState<string>('Select city')\r\n  const [textColor, setTextColor] = useState<any>({ color: '#8083A4' })\r\n\r\n  function onSelect (event: React.FormEvent<EventTarget>): void {\r\n    const target = event.target as HTMLInputElement\r\n    setCity(cityArr[Number(target.id)].name)\r\n    setTextColor({ color: '#2C2D76' })\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (city !== 'Select city') {\r\n      props.setCity(city)\r\n    }\r\n  }, [city])\r\n\r\n  if ((show) && (classNameArrow !== 'select__head')) {\r\n    setClassNameArrow('select__head')\r\n    setClassNameUl('select__list')\r\n  } else if ((!show) && (classNameArrow !== 'select__head close')) {\r\n    setClassNameArrow('select__head close')\r\n    setClassNameUl('select__list close')\r\n  }\r\n  return (\r\n        <div className=\"select\" onClick={() => setShow(!show)}>\r\n            <input className=\"select__input\" type=\"hidden\" name=\"\"/>\r\n            <div className={classNameArrow} style={textColor}> {city} </div>\r\n            <ul className={classNameUl} onClick={(e) => onSelect(e)}>\r\n                {cityArr.map((item, index) =>\r\n                    <li className=\"select__item\" key={index} id={index.toString()}>{item.name}</li>)}\r\n            </ul>\r\n        </div>\r\n  )\r\n}\r\n\r\nexport default SelectCity\r\n","import React from 'react'\r\nimport './PlugWeatherForecastCard.css'\r\n\r\nfunction PlugWeatherForecastCard () {\r\n  return (\r\n        <div className=\"plugBlock\">\r\n            <div className=\"plugBlock__img\" />\r\n            <p className=\"plugBlock__text\">Fill in all the fields and the weather will be displayed</p>\r\n        </div>\r\n  )\r\n}\r\n\r\nexport default PlugWeatherForecastCard\r\n","import React from 'react'\r\nimport './OneDayForecastCard.css'\r\n\r\nfunction OneDayForecastCard (props: any) {\r\n  return (\r\n      <div className={`dayWeatherCard ${props.className}`}>\r\n        <span className=\"dayWeatherCard__date\">{props.forecast.date}</span>\r\n        <img src= {`http://openweathermap.org/img/wn/${props.forecast.icon}@2x.png`} alt=\"error\" className={`dayWeatherCard__icon ${props.className}`}/>\r\n        <h1 className=\"dayWeatherCard__temp\">+{props.forecast.temp}°</h1>\r\n      </div>\r\n  )\r\n}\r\n\r\nexport default OneDayForecastCard\r\n","import React from 'react'\r\nimport './InputDate.css'\r\n\r\nfunction InputDate (props: any) {\r\n  function dateToFormatString (date: string): string {\r\n    if (date) {\r\n      const arr = date.split(/[- /.]/)\r\n      return arr[2] + '/' + arr[1] + '/' + arr[0]\r\n    }\r\n    return ''\r\n  }\r\n\r\n  return (\r\n    <div className=\"date select\">\r\n      <input className=\"date__input\" type=\"date\" onChange={(e) => props.setDate(dateToFormatString(e.target.value))}/>\r\n      <input className=\"date__head\"\r\n             value={props.date}\r\n             placeholder=\"Select date\"\r\n             pattern=\"^(0[1-9]|[12][0-9]|3[01])[- /.](0[1-9]|1[012])[- /.](2021)$\"\r\n             onChange={(e) => props.setDate(e.target.value)} onSubmit={() => console.log('submit')}/>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default InputDate\r\n","import React, { useEffect, useState } from 'react'\r\nimport '../WeeklyForecastBlock/ForecastBlock.css'\r\nimport SelectCity from '../SelectCity/SelectCity'\r\nimport PlugWeatherForecastCard from '../PlugWeatherForecastCard/PlugWeatherForecastCard'\r\nimport { API_KEY, cityArr, IDayWeather, months } from '../../assets/constants'\r\nimport DailyWeatherForecastCard from '../OneDayForecastCard/OneDayForecastCard'\r\nimport InputDate from '../InputDate/InputDate'\r\n\r\nfunction PastForecastBlock () {\r\n  const [city, setCity] = useState<string>('')\r\n  const [date, setDate] = useState<string>('')\r\n  const [time, setTime] = useState<string>('')\r\n  const [forecast, setForecast] = useState<IDayWeather | null>(null)\r\n  const [loading, setLoading] = useState<boolean>(false)\r\n  const [dateForCard, setDateFarCard] = useState<string>('')\r\n  useEffect(() => {\r\n    if ((city.length) && (date.length)) {\r\n      const index: number = cityArr.findIndex(item => item.name === city)\r\n      const selectedCity = cityArr[index]\r\n      const fetchWeather = async () => {\r\n        try {\r\n          const response = await fetch(\r\n            `https://api.openweathermap.org/data/2.5/onecall/timemachine?lat=${selectedCity.latitude}&lon=${selectedCity.longitude}&dt=${time}&units=metric&appid=${API_KEY}`\r\n          )\r\n          const data = await response.json()\r\n          setForecast({ temp: Math.floor(data.current.temp), date: dateForCard, icon: data.current.weather[0].icon })\r\n          setLoading(true)\r\n        } catch (e) {\r\n          console.log(e.message)\r\n        }\r\n      }\r\n      fetchWeather()\r\n    }\r\n  }, [city, time])\r\n\r\n  function stringToFormatDate () {\r\n    const arr = date.split(/[- /.]/)\r\n    return arr[2] + '-' + arr[1] + '-' + arr[0]\r\n  }\r\n\r\n  useEffect(() => {\r\n    if ((/^(0[1-9]|[12][0-9]|3[01])[- /.](0[1-9]|1[012])[- /.](2021)/).exec(date)) {\r\n      const newDate = new Date(stringToFormatDate())\r\n      const nowDate = new Date()\r\n      // проверка на попадание в нужные 5 дней, это 432000000мс\r\n      if (nowDate.getTime() - newDate.getTime() < 432000000) {\r\n        setDateFarCard(newDate.getDate() + ' ' + months[newDate.getMonth()] + ' ' + newDate.getFullYear())\r\n        setTime((newDate.getTime() / 1000).toString())\r\n      } else console.log('Более пяти дней назад')\r\n    }\r\n  }, [date])\r\n  return (\r\n    <section className=\"forecastBlock\">\r\n      <h2 className=\"forecastBlock__title\">Forecast for a Date in the Past</h2>\r\n      <div className=\"selectBlock\">\r\n        <SelectCity setCity={setCity}/>\r\n        <InputDate date={date} setDate={setDate}/>\r\n      </div>\r\n      {\r\n        (loading)\r\n          ? <DailyWeatherForecastCard forecast={forecast} className={'past'}/>\r\n          : <PlugWeatherForecastCard/>\r\n      }\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default PastForecastBlock\r\n","import React, { useEffect, useState } from 'react'\r\nimport DailyWeatherForecastCard from '../OneDayForecastCard/OneDayForecastCard'\r\nimport { IDayWeather } from '../../assets/constants'\r\nimport './WeeklyForecastGroup.css'\r\n\r\nfunction WeeklyForecastGroup (props: any) {\r\n  const [selectedDayIndex, setSelectedDayIndex] = useState<number>(0)\r\n  const [showButton, setShowButton] = useState<boolean>(true)\r\n  const [disabledNext, setDisabledNext] = useState<boolean>(false)\r\n  const [disabledPrev, setDisabledPrev] = useState<boolean>(true)\r\n  const rightBound: number = 5\r\n  const leftBound: number = 0\r\n  function changeDayIndex (next: boolean):void {\r\n    if (next) {\r\n      if (selectedDayIndex < rightBound) {\r\n        setSelectedDayIndex(selectedDayIndex + 1)\r\n        if (selectedDayIndex + 1 === rightBound) {\r\n          setDisabledNext(true)\r\n        }\r\n        if (disabledPrev) setDisabledPrev(false)\r\n      }\r\n    } else {\r\n      if (selectedDayIndex > leftBound) {\r\n        setSelectedDayIndex(selectedDayIndex - 1)\r\n        if (selectedDayIndex - 1 === leftBound) {\r\n          setDisabledPrev(true)\r\n        }\r\n        if (disabledNext) setDisabledNext(false)\r\n      }\r\n    }\r\n  }\r\n  const desktopWidthThreshold = 1400\r\n  function showArrows ():void {\r\n    if ((document.documentElement.clientWidth > desktopWidthThreshold) && (!showButton)) {\r\n      setShowButton(true)\r\n    }\r\n    if ((showButton) && (document.documentElement.clientWidth < desktopWidthThreshold)) {\r\n      setShowButton(false)\r\n    }\r\n  }\r\n  function selectedFormCard (index: number, item: IDayWeather): any {\r\n    if (showButton) {\r\n      if ((index >= selectedDayIndex) && (index < selectedDayIndex + 3)) return <DailyWeatherForecastCard forecast={item} className={'now'} key={index}/>\r\n    } else {\r\n      return <DailyWeatherForecastCard forecast={item} className={'now'} key={index}/>\r\n    }\r\n  }\r\n  useEffect(() => {\r\n    showArrows()\r\n    window.addEventListener('resize', showArrows)\r\n  })\r\n  return (\r\n    <div className=\"dailyForecastBlock\">\r\n      <div className=\"dailyForecastBlock__cards\">\r\n        {props.forecast.map((item: IDayWeather, index: number) => selectedFormCard(index, item))}\r\n      </div>\r\n      {\r\n        (showButton)\r\n          ? <>\r\n            <button className=\"dailyForecastBlock__control prev\" onClick={() => changeDayIndex(false)} disabled={disabledPrev}/>\r\n            <button className=\"dailyForecastBlock__control next\" onClick={() => changeDayIndex(true)} disabled={disabledNext}/>\r\n            </>\r\n          : <></>\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default WeeklyForecastGroup\r\n","import React, { useState, useEffect } from 'react'\r\nimport './ForecastBlock.css'\r\nimport SelectCity from '../SelectCity/SelectCity'\r\nimport PlugWeatherForecastCard from '../PlugWeatherForecastCard/PlugWeatherForecastCard'\r\nimport { cityArr, API_KEY, IDayWeather, months } from '../../assets/constants'\r\nimport DailyForecastBlock from '../WeeklyForecastGroup/WeeklyForecastGroup'\r\n\r\nfunction WeeklyForecastBlock () {\r\n  const [city, setCity] = useState<string>('')\r\n  const [forecast, setForecast] = useState<IDayWeather[]>([])\r\n  const [loading, setLoading] = useState<boolean>(false)\r\n\r\n  function getWeeklyForecast (data: any): IDayWeather[] {\r\n    const date = new Date()\r\n    const weatherForecast = []\r\n    for (let i = 0; i < data.daily.length; i++) {\r\n      weatherForecast.push({\r\n        temp: Math.floor(data.daily[i].temp.day),\r\n        icon: data.daily[i].weather[0].icon,\r\n        date: date.getDate() + i + ' ' + months[date.getMonth()] + ' ' + date.getFullYear()\r\n      })\r\n    }\r\n    return weatherForecast\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (city.length) {\r\n      const index: number = cityArr.findIndex(item => item.name === city)\r\n      const selectedCity = cityArr[index]\r\n      const fetchWeather = async () => {\r\n        try {\r\n          const response = await fetch(\r\n            `https://api.openweathermap.org/data/2.5/onecall?lat=${selectedCity.latitude}&lon=${selectedCity.longitude}&units=metric&exclude=hourly,alerts,minutely,current&appid=${API_KEY}`\r\n          )\r\n          const data = await response.json()\r\n          setForecast(getWeeklyForecast(data))\r\n          setLoading(true)\r\n        } catch (e) {\r\n          console.log(e.message)\r\n        }\r\n      }\r\n      fetchWeather()\r\n    }\r\n  }, [city])\r\n  return (\r\n    <section className=\"forecastBlock\">\r\n      <h2 className=\"forecastBlock__title\">7 Days Forecast</h2>\r\n      <SelectCity setCity={setCity}/>\r\n      {\r\n        (loading)\r\n          ? <DailyForecastBlock forecast={forecast}/>\r\n          : <PlugWeatherForecastCard/>\r\n      }\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default WeeklyForecastBlock\r\n","import React from 'react'\r\nimport './App.css'\r\nimport PastlyForecastBlock from './components/PastForecastBlock/PastForecastBlock'\r\nimport NearlyForecastBlock from './components/WeeklyForecastBlock/WeeklyForecastBlock'\r\n\r\nfunction App () {\r\n  return (\r\n        <div className=\"App\">\r\n          <header className=\"header\"><h1 className=\"title\"> Weather <div>forecast</div></h1></header>\r\n          <main className=\"main\">\r\n            <NearlyForecastBlock/>\r\n            <PastlyForecastBlock/>\r\n          </main>\r\n          <footer className=\"footer\">C ЛЮБОВЬЮ ОТ MERCURY DEVELOPMENT</footer>\r\n        </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}